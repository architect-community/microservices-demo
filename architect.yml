name: examples/boutique

interfaces:
  frontend: ${ services.frontend.interfaces.main.url }

services:
  frontend:
    build:
      context: ./src/frontend
    description: Frontend webapp powering the Boutique shop.
    language: go
    interfaces:
      main: 8080
    environment:
      PRODUCT_CATALOG_SERVICE_ADDR: ${ services.productcatalog.interfaces.main.host }:${ services.productcatalog.interfaces.main.port }
      CURRENCY_SERVICE_ADDR: ${ services.currency.interfaces.main.host }:${ services.currency.interfaces.main.port }
      CART_SERVICE_ADDR: ${ services.cart.interfaces.main.host }:${ services.cart.interfaces.main.port }
      RECOMMENDATION_SERVICE_ADDR: ${ services.recommendation.interfaces.main.host }:${ services.recommendation.interfaces.main.port }
      SHIPPING_SERVICE_ADDR: ${ services.shipping.interfaces.main.host }:${ services.shipping.interfaces.main.port }
      AD_SERVICE_ADDR: ${ services.ad.interfaces.main.host }:${ services.ad.interfaces.main.port }
      CHECKOUT_SERVICE_ADDR: ${ services.checkout.interfaces.main.host }:${ services.checkout.interfaces.main.port }

  productcatalog:
    build:
      context: ./src/productcatalogservice
    description: Service for searching and retrieving details on product listings.
    language: go
    interfaces:
      main: 8080

  currency:
    build:
      context: ./src/currencyservice
    description: Service for handling currency conversion.
    language: node
    interfaces:
      main: 8080

  cart:
    build:
      context: ./src/cartservice
    description: Shopping cart service that uses a Redis cache for cart persistence.
    language: csharp
    interfaces:
      main: 8080
    environment:
      LISTEN_ADDR: 0.0.0.0
      REDIS_ADDR: ${ services.cart-db.interfaces.main.host }:${ services.cart-db.interfaces.main.port }

  cart-db:
    image: redis
    interfaces:
      main: 6379

  recommendation:
    build:
      context: ./src/recommendationservice
    description: Service for querying recommended products.
    language: python
    interfaces:
      main: 8080
    environment:
      ENABLE_PROFILER: 0
      PRODUCT_CATALOG_SERVICE_ADDR: ${ services.productcatalog.interfaces.main.host }:${ services.productcatalog.interfaces.main.port }

  shipping:
    build:
      context: ./src/shippingservice
    description: Service for retrieving shipping quotes and executing product shipment.
    language: go
    interfaces:
      main: 8080

  ad:
    build:
      context: ./src/adservice
    description: The Ad service provides advertisement based on context keys. If no context keys are provided then it returns random ads.
    language: java
    interfaces:
      main: 8080

  checkout:
    build:
      context: ./src/checkoutservice
    description: Service for processing shopping carts and placing orders.
    language: go
    interfaces:
      main: 8080
    environment:
      PRODUCT_CATALOG_SERVICE_ADDR: ${ services.productcatalog.interfaces.main.host }:${ services.productcatalog.interfaces.main.port }
      SHIPPING_SERVICE_ADDR: ${ services.shipping.interfaces.main.host }:${ services.shipping.interfaces.main.port }
      PAYMENT_SERVICE_ADDR: ${ services.payment.interfaces.main.host }:${ services.payment.interfaces.main.port }
      EMAIL_SERVICE_ADDR: ${ services.email.interfaces.main.host }:${ services.email.interfaces.main.port }
      CURRENCY_SERVICE_ADDR: ${ services.currency.interfaces.main.host }:${ services.currency.interfaces.main.port }
      CART_SERVICE_ADDR: ${ services.cart.interfaces.main.host }:${ services.cart.interfaces.main.port }

  email:
    build:
      context: ./src/emailservice
    description: Service for sending order confirmations via email.
    language: python
    interfaces:
      main: 8080

  payment:
    build:
      context: ./src/paymentservice
    description: Service for processing payments upon placement of orders.
    language: node
    interfaces:
      main: 8080
