name: examples/boutique
homepage: https://github.com/architect-team/microservices-demo

dependencies:
  examples/boutique-cartservice: latest

interfaces:
  frontend: ${{ services.frontend.interfaces.main.url }}

services:
  frontend:
    build:
      context: ./src/frontend
    description: Frontend webapp powering the Boutique shop.
    language: go
    interfaces:
      main: &frontend-port 8080
    environment:
      PORT: *frontend-port
      PRODUCT_CATALOG_SERVICE_ADDR: ${{ services.productcatalog.interfaces.main.host }}:${{ services.productcatalog.interfaces.main.port }}
      CURRENCY_SERVICE_ADDR: ${{ services.currency.interfaces.main.host }}:${{ services.currency.interfaces.main.port }}
      CART_SERVICE_ADDR: ${{ dependencies['examples/boutique-cartservice'].interfaces.api.host }}:${{ dependencies['examples/boutique-cartservice'].interfaces.api.port }}
      RECOMMENDATION_SERVICE_ADDR: ${{ services.recommendation.interfaces.main.host }}:${{ services.recommendation.interfaces.main.port }}
      SHIPPING_SERVICE_ADDR: ${{ services.shipping.interfaces.main.host }}:${{ services.shipping.interfaces.main.port }}
      AD_SERVICE_ADDR: ${{ services.ad.interfaces.main.host }}:${{ services.ad.interfaces.main.port }}
      CHECKOUT_SERVICE_ADDR: ${{ services.checkout.interfaces.main.host }}:${{ services.checkout.interfaces.main.port }}

  productcatalog:
    build:
      context: ./src/productcatalogservice
    description: Service for searching and retrieving details on product listings.
    language: go
    interfaces:
      main: &productcatalog-port 3550
    environment:
      PORT: *productcatalog-port

  currency:
    build:
      context: ./src/currencyservice
    description: Service for handling currency conversion.
    language: node
    interfaces:
      main: &currency-port 7000
    environment:
      PORT: *currency-port

  recommendation:
    build:
      context: ./src/recommendationservice
    description: Service for querying recommended products.
    language: python
    interfaces:
      main: &recommendation-port 8080
    environment:
      PORT: *recommendation-port
      ENABLE_PROFILER: 0
      PRODUCT_CATALOG_SERVICE_ADDR: ${{ services.productcatalog.interfaces.main.host }}:${{ services.productcatalog.interfaces.main.port }}

  shipping:
    build:
      context: ./src/shippingservice
    description: Service for retrieving shipping quotes and executing product shipment.
    language: go
    interfaces:
      main: &shipping-port 50051
    environment:
      PORT: *shipping-port

  ad:
    build:
      context: ./src/adservice
    description: The Ad service provides advertisement based on context keys. If no context keys are provided then it returns random ads.
    language: java
    interfaces:
      main: &ad-port 9555
    environment:
      PORT: *ad-port

  checkout:
    build:
      context: ./src/checkoutservice
    description: Service for processing shopping carts and placing orders.
    language: go
    interfaces:
      main: &checkout-port 5050
    environment:
      PORT: *checkout-port
      PRODUCT_CATALOG_SERVICE_ADDR: ${{ services.productcatalog.interfaces.main.host }}:${{ services.productcatalog.interfaces.main.port }}
      SHIPPING_SERVICE_ADDR: ${{ services.shipping.interfaces.main.host }}:${{ services.shipping.interfaces.main.port }}
      PAYMENT_SERVICE_ADDR: ${{ services.payment.interfaces.main.host }}:${{ services.payment.interfaces.main.port }}
      EMAIL_SERVICE_ADDR: ${{ services.email.interfaces.main.host }}:${{ services.email.interfaces.main.port }}
      CURRENCY_SERVICE_ADDR: ${{ services.currency.interfaces.main.host }}:${{ services.currency.interfaces.main.port }}
      CART_SERVICE_ADDR: ${{ dependencies['examples/boutique-cartservice'].interfaces.api.host }}:${{ dependencies['examples/boutique-cartservice'].interfaces.api.port }}

  email:
    build:
      context: ./src/emailservice
    description: Service for sending order confirmations via email.
    language: python
    interfaces:
      main: &email-port 8080
    environment:
      PORT: *email-port

  payment:
    build:
      context: ./src/paymentservice
    description: Service for processing payments upon placement of orders.
    language: node
    interfaces:
      main: &payment-port 50051
    environment:
      PORT: *payment-port
